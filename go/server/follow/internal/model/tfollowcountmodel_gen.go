// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tFollowCountFieldNames          = builder.RawFieldNames(&TFollowCount{})
	tFollowCountRows                = strings.Join(tFollowCountFieldNames, ",")
	tFollowCountRowsExpectAutoSet   = strings.Join(stringx.Remove(tFollowCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tFollowCountRowsWithPlaceHolder = strings.Join(stringx.Remove(tFollowCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tFollowCountModel interface {
		Insert(ctx context.Context, data *TFollowCount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TFollowCount, error)
		FindOneByUserId(ctx context.Context, userId int64) (*TFollowCount, error)
		Update(ctx context.Context, data *TFollowCount) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTFollowCountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TFollowCount struct {
		Id             int64     `db:"id"`              // 关注计数id，自增主键
		UserId         int64     `db:"user_id"`         // 用户id
		FollowingCount int64     `db:"following_count"` // 关注数
		FollowerCount  int64     `db:"follower_count"`  // 粉丝数
		CreateTime     time.Time `db:"create_time"`     // 创建时间
		UpdateTime     time.Time `db:"update_time"`     // 最后修改时间
	}
)

func newTFollowCountModel(conn sqlx.SqlConn) *defaultTFollowCountModel {
	return &defaultTFollowCountModel{
		conn:  conn,
		table: "`t_follow_count`",
	}
}

func (m *defaultTFollowCountModel) withSession(session sqlx.Session) *defaultTFollowCountModel {
	return &defaultTFollowCountModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`t_follow_count`",
	}
}

func (m *defaultTFollowCountModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTFollowCountModel) FindOne(ctx context.Context, id int64) (*TFollowCount, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tFollowCountRows, m.table)
	var resp TFollowCount
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTFollowCountModel) FindOneByUserId(ctx context.Context, userId int64) (*TFollowCount, error) {
	var resp TFollowCount
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", tFollowCountRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTFollowCountModel) Insert(ctx context.Context, data *TFollowCount) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tFollowCountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.FollowingCount, data.FollowerCount)
	return ret, err
}

func (m *defaultTFollowCountModel) Update(ctx context.Context, newData *TFollowCount) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tFollowCountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.FollowingCount, newData.FollowerCount, newData.Id)
	return err
}

func (m *defaultTFollowCountModel) tableName() string {
	return m.table
}
