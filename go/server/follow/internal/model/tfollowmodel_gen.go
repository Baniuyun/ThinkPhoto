// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tFollowFieldNames          = builder.RawFieldNames(&TFollow{})
	tFollowRows                = strings.Join(tFollowFieldNames, ",")
	tFollowRowsExpectAutoSet   = strings.Join(stringx.Remove(tFollowFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tFollowRowsWithPlaceHolder = strings.Join(stringx.Remove(tFollowFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tFollowModel interface {
		Insert(ctx context.Context, data *TFollow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TFollow, error)
		FindOneByFollowerIdFollowingId(ctx context.Context, followerId int64, followingId int64) (*TFollow, error)
		Update(ctx context.Context, data *TFollow) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTFollowModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TFollow struct {
		Id          int64     `db:"id"`           // 关注关系id，自增主键
		FollowerId  int64     `db:"follower_id"`  // 粉丝id
		FollowingId int64     `db:"following_id"` // 博主id
		IsFollow    int64     `db:"is_follow"`    // 是否关注：0未关注，1已关注
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 最后修改时间
	}
)

func newTFollowModel(conn sqlx.SqlConn) *defaultTFollowModel {
	return &defaultTFollowModel{
		conn:  conn,
		table: "`t_follow`",
	}
}

func (m *defaultTFollowModel) withSession(session sqlx.Session) *defaultTFollowModel {
	return &defaultTFollowModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`t_follow`",
	}
}

func (m *defaultTFollowModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTFollowModel) FindOne(ctx context.Context, id int64) (*TFollow, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tFollowRows, m.table)
	var resp TFollow
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTFollowModel) FindOneByFollowerIdFollowingId(ctx context.Context, followerId int64, followingId int64) (*TFollow, error) {
	var resp TFollow
	query := fmt.Sprintf("select %s from %s where `follower_id` = ? and `following_id` = ? limit 1", tFollowRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, followerId, followingId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTFollowModel) Insert(ctx context.Context, data *TFollow) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tFollowRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FollowerId, data.FollowingId, data.IsFollow)
	return ret, err
}

func (m *defaultTFollowModel) Update(ctx context.Context, newData *TFollow) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tFollowRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.FollowerId, newData.FollowingId, newData.IsFollow, newData.Id)
	return err
}

func (m *defaultTFollowModel) tableName() string {
	return m.table
}
