// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.1
// source: video.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoService_GetPublishToken_FullMethodName       = "/video.VideoService/GetPublishToken"
	VideoService_GetPublishVideoList_FullMethodName   = "/video.VideoService/GetPublishVideoList"
	VideoService_GetFavoriteVideoList_FullMethodName  = "/video.VideoService/GetFavoriteVideoList"
	VideoService_PublishVideo_FullMethodName          = "/video.VideoService/PublishVideo"
	VideoService_DeleteVideo_FullMethodName           = "/video.VideoService/DeleteVideo"
	VideoService_GetVideoList_FullMethodName          = "/video.VideoService/GetVideoList"
	VideoService_UpdateFavoriteCount_FullMethodName   = "/video.VideoService/UpdateFavoriteCount"
	VideoService_GetVideoInfoBYVideoId_FullMethodName = "/video.VideoService/GetVideoInfoBYVideoId"
)

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	// 获取上传回调凭证
	GetPublishToken(ctx context.Context, in *GetPublishTokenRequest, opts ...grpc.CallOption) (*GetPublishTokenResponse, error)
	// 获取用户上传视频列表
	GetPublishVideoList(ctx context.Context, in *GetPublishVideoListRequest, opts ...grpc.CallOption) (*GetPublishVideoListResponse, error)
	// 获取用户喜欢视频列表
	GetFavoriteVideoList(ctx context.Context, in *GetFavoriteVideoListRequest, opts ...grpc.CallOption) (*GetFavoriteVideoListResponse, error)
	// 上传视频
	PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error)
	// 删除视频
	DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error)
	// 获取视频列表
	GetVideoList(ctx context.Context, in *GetVideoListRequest, opts ...grpc.CallOption) (*GetVideoListResponse, error)
	// 点赞并更新这个视频的获赞数
	UpdateFavoriteCount(ctx context.Context, in *UpdateFavoriteCountReq, opts ...grpc.CallOption) (*UpdateFavoriteCountRsp, error)
	// 根据视频id获取视频信息
	GetVideoInfoBYVideoId(ctx context.Context, in *GetVideoInfoReq, opts ...grpc.CallOption) (*GetVideoInfoResp, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) GetPublishToken(ctx context.Context, in *GetPublishTokenRequest, opts ...grpc.CallOption) (*GetPublishTokenResponse, error) {
	out := new(GetPublishTokenResponse)
	err := c.cc.Invoke(ctx, VideoService_GetPublishToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetPublishVideoList(ctx context.Context, in *GetPublishVideoListRequest, opts ...grpc.CallOption) (*GetPublishVideoListResponse, error) {
	out := new(GetPublishVideoListResponse)
	err := c.cc.Invoke(ctx, VideoService_GetPublishVideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetFavoriteVideoList(ctx context.Context, in *GetFavoriteVideoListRequest, opts ...grpc.CallOption) (*GetFavoriteVideoListResponse, error) {
	out := new(GetFavoriteVideoListResponse)
	err := c.cc.Invoke(ctx, VideoService_GetFavoriteVideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) PublishVideo(ctx context.Context, in *PublishVideoRequest, opts ...grpc.CallOption) (*PublishVideoResponse, error) {
	out := new(PublishVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_PublishVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error) {
	out := new(DeleteVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_DeleteVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoList(ctx context.Context, in *GetVideoListRequest, opts ...grpc.CallOption) (*GetVideoListResponse, error) {
	out := new(GetVideoListResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UpdateFavoriteCount(ctx context.Context, in *UpdateFavoriteCountReq, opts ...grpc.CallOption) (*UpdateFavoriteCountRsp, error) {
	out := new(UpdateFavoriteCountRsp)
	err := c.cc.Invoke(ctx, VideoService_UpdateFavoriteCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoInfoBYVideoId(ctx context.Context, in *GetVideoInfoReq, opts ...grpc.CallOption) (*GetVideoInfoResp, error) {
	out := new(GetVideoInfoResp)
	err := c.cc.Invoke(ctx, VideoService_GetVideoInfoBYVideoId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	// 获取上传回调凭证
	GetPublishToken(context.Context, *GetPublishTokenRequest) (*GetPublishTokenResponse, error)
	// 获取用户上传视频列表
	GetPublishVideoList(context.Context, *GetPublishVideoListRequest) (*GetPublishVideoListResponse, error)
	// 获取用户喜欢视频列表
	GetFavoriteVideoList(context.Context, *GetFavoriteVideoListRequest) (*GetFavoriteVideoListResponse, error)
	// 上传视频
	PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error)
	// 删除视频
	DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error)
	// 获取视频列表
	GetVideoList(context.Context, *GetVideoListRequest) (*GetVideoListResponse, error)
	// 点赞并更新这个视频的获赞数
	UpdateFavoriteCount(context.Context, *UpdateFavoriteCountReq) (*UpdateFavoriteCountRsp, error)
	// 根据视频id获取视频信息
	GetVideoInfoBYVideoId(context.Context, *GetVideoInfoReq) (*GetVideoInfoResp, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) GetPublishToken(context.Context, *GetPublishTokenRequest) (*GetPublishTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishToken not implemented")
}
func (UnimplementedVideoServiceServer) GetPublishVideoList(context.Context, *GetPublishVideoListRequest) (*GetPublishVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishVideoList not implemented")
}
func (UnimplementedVideoServiceServer) GetFavoriteVideoList(context.Context, *GetFavoriteVideoListRequest) (*GetFavoriteVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteVideoList not implemented")
}
func (UnimplementedVideoServiceServer) PublishVideo(context.Context, *PublishVideoRequest) (*PublishVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoServiceServer) DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoList(context.Context, *GetVideoListRequest) (*GetVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoList not implemented")
}
func (UnimplementedVideoServiceServer) UpdateFavoriteCount(context.Context, *UpdateFavoriteCountReq) (*UpdateFavoriteCountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFavoriteCount not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoInfoBYVideoId(context.Context, *GetVideoInfoReq) (*GetVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfoBYVideoId not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_GetPublishToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetPublishToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetPublishToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetPublishToken(ctx, req.(*GetPublishTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetPublishVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetPublishVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetPublishVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetPublishVideoList(ctx, req.(*GetPublishVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetFavoriteVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoriteVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetFavoriteVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetFavoriteVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetFavoriteVideoList(ctx, req.(*GetFavoriteVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_PublishVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishVideo(ctx, req.(*PublishVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).DeleteVideo(ctx, req.(*DeleteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoList(ctx, req.(*GetVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UpdateFavoriteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFavoriteCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UpdateFavoriteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_UpdateFavoriteCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UpdateFavoriteCount(ctx, req.(*UpdateFavoriteCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoInfoBYVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoInfoBYVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoInfoBYVideoId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoInfoBYVideoId(ctx, req.(*GetVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublishToken",
			Handler:    _VideoService_GetPublishToken_Handler,
		},
		{
			MethodName: "GetPublishVideoList",
			Handler:    _VideoService_GetPublishVideoList_Handler,
		},
		{
			MethodName: "GetFavoriteVideoList",
			Handler:    _VideoService_GetFavoriteVideoList_Handler,
		},
		{
			MethodName: "PublishVideo",
			Handler:    _VideoService_PublishVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _VideoService_DeleteVideo_Handler,
		},
		{
			MethodName: "GetVideoList",
			Handler:    _VideoService_GetVideoList_Handler,
		},
		{
			MethodName: "UpdateFavoriteCount",
			Handler:    _VideoService_UpdateFavoriteCount_Handler,
		},
		{
			MethodName: "GetVideoInfoBYVideoId",
			Handler:    _VideoService_GetVideoInfoBYVideoId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
