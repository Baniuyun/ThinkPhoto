// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tVideoFieldNames          = builder.RawFieldNames(&TVideo{})
	tVideoRows                = strings.Join(tVideoFieldNames, ",")
	tVideoRowsExpectAutoSet   = strings.Join(stringx.Remove(tVideoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tVideoRowsWithPlaceHolder = strings.Join(stringx.Remove(tVideoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tVideoModel interface {
		Insert(ctx context.Context, data *TVideo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TVideo, error)
		Update(ctx context.Context, data *TVideo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTVideoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TVideo struct {
		Id            int64          `db:"id"`             // 视频id，自增主键
		AuthorId      int64          `db:"author_id"`      // 视频作者id
		AuthorName    string         `db:"author_name"`    // 作者名字
		PlayUrl       string         `db:"play_url"`       // 播放url
		CoverUrl      sql.NullString `db:"cover_url"`      // 封面url
		Avatar        string         `db:"avatar"`         // 头像地址
		FavoriteCount int64          `db:"favorite_count"` // 视频的点赞数量
		CommentCount  int64          `db:"comment_count"`  // 视频的评论数量
		Information   string         `db:"information"`    // 视频简介
		Tag           int64          `db:"tag"`            // 视频标签
		Time          int64          `db:"time"`           // 时间戳
	}
)

func newTVideoModel(conn sqlx.SqlConn) *defaultTVideoModel {
	return &defaultTVideoModel{
		conn:  conn,
		table: "`t_video`",
	}
}

func (m *defaultTVideoModel) withSession(session sqlx.Session) *defaultTVideoModel {
	return &defaultTVideoModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`t_video`",
	}
}

func (m *defaultTVideoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTVideoModel) FindOne(ctx context.Context, id int64) (*TVideo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tVideoRows, m.table)
	var resp TVideo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTVideoModel) Insert(ctx context.Context, data *TVideo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tVideoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AuthorId, data.AuthorName, data.PlayUrl, data.CoverUrl, data.Avatar, data.FavoriteCount, data.CommentCount, data.Information, data.Tag, data.Time)
	return ret, err
}

func (m *defaultTVideoModel) Update(ctx context.Context, data *TVideo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tVideoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AuthorId, data.AuthorName, data.PlayUrl, data.CoverUrl, data.Avatar, data.FavoriteCount, data.CommentCount, data.Information, data.Tag, data.Time, data.Id)
	return err
}

func (m *defaultTVideoModel) tableName() string {
	return m.table
}
