// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.9.1
// source: zinc.proto

package zinc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZincSearch_Search_FullMethodName = "/zinc.ZincSearch/Search"
	ZincSearch_Delete_FullMethodName = "/zinc.ZincSearch/Delete"
	ZincSearch_Update_FullMethodName = "/zinc.ZincSearch/Update"
	ZincSearch_Doc_FullMethodName    = "/zinc.ZincSearch/Doc"
)

// ZincSearchClient is the client API for ZincSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZincSearchClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Delete(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *UpdateDocRequest, opts ...grpc.CallOption) (*Response, error)
	Doc(ctx context.Context, in *Doc, opts ...grpc.CallOption) (*Response, error)
}

type zincSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewZincSearchClient(cc grpc.ClientConnInterface) ZincSearchClient {
	return &zincSearchClient{cc}
}

func (c *zincSearchClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, ZincSearch_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zincSearchClient) Delete(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ZincSearch_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zincSearchClient) Update(ctx context.Context, in *UpdateDocRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ZincSearch_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zincSearchClient) Doc(ctx context.Context, in *Doc, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ZincSearch_Doc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZincSearchServer is the server API for ZincSearch service.
// All implementations must embed UnimplementedZincSearchServer
// for forward compatibility
type ZincSearchServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Delete(context.Context, *DeleteDocRequest) (*Response, error)
	Update(context.Context, *UpdateDocRequest) (*Response, error)
	Doc(context.Context, *Doc) (*Response, error)
	mustEmbedUnimplementedZincSearchServer()
}

// UnimplementedZincSearchServer must be embedded to have forward compatible implementations.
type UnimplementedZincSearchServer struct {
}

func (UnimplementedZincSearchServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedZincSearchServer) Delete(context.Context, *DeleteDocRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedZincSearchServer) Update(context.Context, *UpdateDocRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedZincSearchServer) Doc(context.Context, *Doc) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Doc not implemented")
}
func (UnimplementedZincSearchServer) mustEmbedUnimplementedZincSearchServer() {}

// UnsafeZincSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZincSearchServer will
// result in compilation errors.
type UnsafeZincSearchServer interface {
	mustEmbedUnimplementedZincSearchServer()
}

func RegisterZincSearchServer(s grpc.ServiceRegistrar, srv ZincSearchServer) {
	s.RegisterService(&ZincSearch_ServiceDesc, srv)
}

func _ZincSearch_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZincSearchServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZincSearch_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZincSearchServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZincSearch_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZincSearchServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZincSearch_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZincSearchServer).Delete(ctx, req.(*DeleteDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZincSearch_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZincSearchServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZincSearch_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZincSearchServer).Update(ctx, req.(*UpdateDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZincSearch_Doc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Doc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZincSearchServer).Doc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZincSearch_Doc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZincSearchServer).Doc(ctx, req.(*Doc))
	}
	return interceptor(ctx, in, info, handler)
}

// ZincSearch_ServiceDesc is the grpc.ServiceDesc for ZincSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZincSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zinc.ZincSearch",
	HandlerType: (*ZincSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _ZincSearch_Search_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ZincSearch_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ZincSearch_Update_Handler,
		},
		{
			MethodName: "Doc",
			Handler:    _ZincSearch_Doc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zinc.proto",
}
